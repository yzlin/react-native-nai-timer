///
/// HybridNitroTimerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <functional>

namespace margelo::nitro::nitrotimer {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroTimer`
   * Inherit this class to create instances of `HybridNitroTimerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroTimer: public HybridNitroTimerSpec {
   * public:
   *   HybridNitroTimer(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroTimerSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroTimerSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroTimerSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual double setTimeout(const std::function<void(double /* id */)>& callback, double delay) = 0;
      virtual void clearTimeout(double id) = 0;
      virtual double setInterval(const std::function<void(double /* id */)>& callback, double interval) = 0;
      virtual void clearInterval(double id) = 0;
      virtual void clearAllTimers() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroTimer";
  };

} // namespace margelo::nitro::nitrotimer
