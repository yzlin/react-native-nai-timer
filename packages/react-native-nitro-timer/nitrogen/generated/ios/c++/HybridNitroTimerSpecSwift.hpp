///
/// HybridNitroTimerSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroTimerSpec.hpp"

// Forward declaration of `HybridNitroTimerSpec_cxx` to properly resolve imports.
namespace NitroTimer { class HybridNitroTimerSpec_cxx; }



#include <functional>

#include "NitroTimer-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrotimer {

  /**
   * The C++ part of HybridNitroTimerSpec_cxx.swift.
   *
   * HybridNitroTimerSpecSwift (C++) accesses HybridNitroTimerSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroTimerSpec_cxx can directly inherit from the C++ class HybridNitroTimerSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroTimerSpecSwift: public virtual HybridNitroTimerSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroTimerSpecSwift(const NitroTimer::HybridNitroTimerSpec_cxx& swiftPart):
      HybridObject(HybridNitroTimerSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroTimer::HybridNitroTimerSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double setTimeout(const std::function<void(double /* id */)>& callback, double delay) override {
      auto __result = _swiftPart.setTimeout(callback, std::forward<decltype(delay)>(delay));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void clearTimeout(double id) override {
      auto __result = _swiftPart.clearTimeout(std::forward<decltype(id)>(id));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline double setInterval(const std::function<void(double /* id */)>& callback, double interval) override {
      auto __result = _swiftPart.setInterval(callback, std::forward<decltype(interval)>(interval));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void clearInterval(double id) override {
      auto __result = _swiftPart.clearInterval(std::forward<decltype(id)>(id));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void clearAllTimers() override {
      auto __result = _swiftPart.clearAllTimers();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroTimer::HybridNitroTimerSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrotimer
