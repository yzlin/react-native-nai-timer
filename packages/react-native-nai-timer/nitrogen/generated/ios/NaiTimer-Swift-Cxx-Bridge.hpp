///
/// NaiTimer-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNaiTimerSpec` to properly resolve imports.
namespace margelo::nitro::naitimer { class HybridNaiTimerSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNaiTimerSpec_cxx` to properly resolve imports.
namespace NaiTimer { class HybridNaiTimerSpec_cxx; }

// Include C++ defined types
#include "HybridNaiTimerSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::naitimer::bridge::swift {

  // pragma MARK: std::function<void(double /* id */)>
  /**
   * Specialized version of `std::function<void(double)>`.
   */
  using Func_void_double = std::function<void(double /* id */)>;
  /**
   * Wrapper class for a `std::function<void(double / * id * /)>`, this can be used from Swift.
   */
  class Func_void_double_Wrapper final {
  public:
    explicit Func_void_double_Wrapper(std::function<void(double /* id */)>&& func): _function(std::make_unique<std::function<void(double /* id */)>>(std::move(func))) {}
    inline void call(double id) const noexcept {
      _function->operator()(id);
    }
  private:
    std::unique_ptr<std::function<void(double /* id */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_double create_Func_void_double(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_double_Wrapper wrap_Func_void_double(Func_void_double value) noexcept {
    return Func_void_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<HybridNaiTimerSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNaiTimerSpec>`.
   */
  using std__shared_ptr_HybridNaiTimerSpec_ = std::shared_ptr<HybridNaiTimerSpec>;
  std::shared_ptr<HybridNaiTimerSpec> create_std__shared_ptr_HybridNaiTimerSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridNaiTimerSpec_(std__shared_ptr_HybridNaiTimerSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridNaiTimerSpec>
  using std__weak_ptr_HybridNaiTimerSpec_ = std::weak_ptr<HybridNaiTimerSpec>;
  inline std__weak_ptr_HybridNaiTimerSpec_ weakify_std__shared_ptr_HybridNaiTimerSpec_(const std::shared_ptr<HybridNaiTimerSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) noexcept {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) noexcept {
    return Result<double>::withError(error);
  }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::naitimer::bridge::swift
