///
/// NaiTimer-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "NaiTimer-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridNaiTimerSpecSwift.hpp"
#include "NaiTimer-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::naitimer::bridge::swift {

  // pragma MARK: std::function<void(double /* id */)>
  Func_void_double create_Func_void_double(void* NON_NULL swiftClosureWrapper) noexcept {
    auto swiftClosure = NaiTimer::Func_void_double::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](double id) mutable -> void {
      swiftClosure.call(id);
    };
  }
  
  // pragma MARK: std::shared_ptr<HybridNaiTimerSpec>
  std::shared_ptr<HybridNaiTimerSpec> create_std__shared_ptr_HybridNaiTimerSpec_(void* NON_NULL swiftUnsafePointer) noexcept {
    NaiTimer::HybridNaiTimerSpec_cxx swiftPart = NaiTimer::HybridNaiTimerSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::naitimer::HybridNaiTimerSpecSwift>(swiftPart);
  }
  void* NON_NULL get_std__shared_ptr_HybridNaiTimerSpec_(std__shared_ptr_HybridNaiTimerSpec_ cppType) {
    std::shared_ptr<margelo::nitro::naitimer::HybridNaiTimerSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::naitimer::HybridNaiTimerSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridNaiTimerSpec\" is not implemented in Swift!");
    }
    #endif
    NaiTimer::HybridNaiTimerSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::naitimer::bridge::swift
