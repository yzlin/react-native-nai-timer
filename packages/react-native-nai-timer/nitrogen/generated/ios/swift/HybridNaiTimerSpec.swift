///
/// HybridNaiTimerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNaiTimerSpec``
public protocol HybridNaiTimerSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func setTimeout(callback: @escaping (_ id: Double) -> Void, delay: Double) throws -> Double
  func clearTimeout(id: Double) throws -> Void
  func setInterval(callback: @escaping (_ id: Double) -> Void, interval: Double) throws -> Double
  func clearInterval(id: Double) throws -> Void
  func clearAllTimers() throws -> Void
}

/// See ``HybridNaiTimerSpec``
open class HybridNaiTimerSpec_base {
  private weak var cxxWrapper: HybridNaiTimerSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNaiTimerSpec_cxx {
  #if DEBUG
    guard self is HybridNaiTimerSpec else {
      fatalError("`self` is not a `HybridNaiTimerSpec`! Did you accidentally inherit from `HybridNaiTimerSpec_base` instead of `HybridNaiTimerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNaiTimerSpec_cxx(self as! HybridNaiTimerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NaiTimer HybridObject.
 * Implement this protocol to create Swift-based instances of NaiTimer.
 * ```swift
 * class HybridNaiTimer : HybridNaiTimerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNaiTimerSpec = HybridNaiTimerSpec_protocol & HybridNaiTimerSpec_base
